"""
Moscow Institute of Physics and Technology
Course: Computer Science. Algorithms and data structures in Python 3.
Lecturer: Timofey Fedorovich Hiryanov
read on 05.09.2017

Contest
"""

# |||||||||||||||||||||||1st semester, week 3|||||||||||||||||||||||||||||||||||||||
# |||||||||||||||||||||||Contest: 'if, for, while'||||||||||||||||||||||||||||||||||||||
# --------------------------|A|----------------------------------------------------

A-Sum of digits of a three-digit number

Ogranicheniye vremeni:	5 s
Ogranicheniye real'nogo vremeni:	5 s
Ogranicheniye pamyati:	64M
Dano trekhznachnoye chislo. Naydite summu yego tsifr.

Format vkhodnykh dannykh
Vvoditsya trekhznachnoye chislo.

Format vykhodnykh dannykh
Odno chislo â€” summa tsifr.
Full score: 50
Parcel penalty: 1
Time limit: 5 s
Real time limit: 5 s
Memory limit: 64M
Given a three digit number. Find the sum of its digits.

Input data format
Enter a three-digit number.

Output format
One number is the sum of the digits.

# --------------------------|B|----------------------------------------------------

B - Queen move

The chess queen can move any number of squares horizontally, vertically or diagonally.
 Given two different squares on a chessboard, determine if the queen can get from the first square to the second
  in one move.
  For simplicity, you can ignore the case when these cells are the same.

Input data format
The program receives as input four numbers from 1 to 8 each, denoting the column number and row number,
 first for the first cell, then for the second cell.

Output Format
The program should return YES if the second cell from the first can be reached by the queen's move. Otherwise - NO.

# --------------------------|C|----------------------------------------------------

C-Leap year

It is required to determine whether the given year is a leap year.
(A year is a leap year if its number is a multiple of 4 but not a multiple of 100, and also if it is a multiple of 400.)

Input data format
The input is a natural number N - the number of the year (0 < N < 100000).

Output format
Print YES if the year is a leap year and NO otherwise.

# --------------------------|D|----------------------------------------------------

D-list of squares

For a given natural number N print all squares of natural numbers not exceeding N , in ascending order.

IMPORTANT! In this task, you need to use a loop.

Input data format
The input of the program is an integer N not exceeding 10000.

Output Format
The program should output a sequence of numbers in ascending order. White is used as a separator.

# --------------------------|E|----------------------------------------------------

E-binary logarithm

Given a natural number N, print the smallest integer k such that 2^k >= N .

IMPORTANT! In this task, you need to use a loop. The use of the if statement is prohibited.
 You cannot use exponentiation in this problem.

input data format
The input to the program is a natural number N, not exceeding 10000.

output data format
It is required to print the smallest k that satisfies the condition of the problem

# --------------------------|F|----------------------------------------------------

F-sequence length


The program receives as input a sequence of non-negative integers, each number is written on a separate line.
 The sequence ends with the digit 0, after reading which the program should finish its work and print
  the number of members of the sequence (not counting the final digit 0). Digits after 0 do not need to be read.

Input data format
The input contains a sequence of integers (each on a new line) ending in 0. The number 0 is not included in the sequence.

Output Format
Print the length of the sequence.

# --------------------------|G|----------------------------------------------------

G-sum of the entered sequence

Determine the sum of all elements of a sequence that ends with the number 0.

Numbers following zero do not need to be read.

Input data format
The elements of the sequence are entered, one integer per line. Numbers are entered until 0 is entered.

Output format
Output one integer - the sum of the sequence.

Count the number of even elements in an array of integers ending in zero.
 Zero itself does not need to be taken into account.

Input data format
An array of numbers ending in zero (each number on a new line, zero is not included in the array)

Output format
One number is the result.

# --------------------------|H|----------------------------------------------------

H-is the number of even elements

Count the number of even elements in an array of integers ending in zero.
Zero by itself does not need to be taken into account.

Input data format
An array of numbers ending in zero (each number on a new line, zero is not included in the array)

Output Format
One number is the result.

# --------------------------|I|----------------------------------------------------

I-Max sequence

The sequence consists of natural numbers and ends with the number 0.
 Determine the value of the largest element of the sequence.

Numbers after zero do not need to be read.

Input data format
A sequence of integers is entered, ending with the number 0 (the number 0 itself is not included in the sequence).

Output Format
Print the answer to the problem (one number).

# --------------------------|J|----------------------------------------------------

J-The number of elements equal to the maximum

The sequence consists of natural numbers and ends with the digit 0. In total, no more than 10,000 digits are entered (not counting the final digit 0). Determine how many elements of this sequence are equal to its largest element. Digits after 0 do not need to be read.

Input data format
A sequence of integers is entered, ending with the number 0 (the number 0 itself is not included in the sequence).

Output Format
Print the answer to the problem (one number).

# |||||||||||||||||||||||1st semester, week 6|||||||||||||||||||||||||||||||||||||||
# |||||||||||||||||||||||Contest: Using Arrays||||||||||||||||||||||||||||||||||||||
# --------------------------|A|----------------------------------------------------

A - belonging of a point to a circle

Penalty for the parcel:	1
Time limit: 1s
Real time limit: 1s
Memory limit: 64M
Given the coordinates of a point and the radius of a circle centered at the origin of the coordinates. Determine if this
 point belongs to a circle. Recall that a circle is a part of the plane,
  consisting of all points of the circle and all points lying within the circle.

The format of the input data is
Three integers on one line: point coordinate on x-axis, point coordinate on y-axis, radius of circle r (r > 0).

Output format
Output "YES" without quotes, if the point belongs to the circle, "NO" without quotes otherwise.

# --------------------------|B|----------------------------------------------------

B-Bank deposit

Run penalty: 1
Time limit: 1 s
Real time limit: 1 s
Memory limit: 64M
The deposit in the bank is x rubles. Every year it is increased by p percent, after which the fractional
 part of the kopecks is discarded. Each year the sum of the deposit increases. You have to determine in
  how many years the deposit will be at least y rubles.

Input data format
Three natural numbers: x, p, y.

The format of the output
Number of years after how many years the deposit will be at least y rubles.

# --------------------------|C|----------------------------------------------------

C-Maximum number of consecutive 1s

Run penalty: 1
Time limit: 1 s
Real time limit: 1 s
Memory limit: 64M
You're given a sequence of 0's and 1's only. You're looking for the maximal number of consecutive 1's
(with no 0 between them).

The format of the input data
The first line of the input consists of a natural number N<=10000 , the length of the array, followed by N numbers
 0 or 1, the elements of the array. Each number is entered on a new line.

Output format
One number is the result.

# --------------------------|D|----------------------------------------------------

Submit a solution for D-Processing an array of numbers

Run penalty: 1
Time limit: 1 s
Real time limit: 1 s
Memory limit: 64M
At input the program gets a set of numbers ending with a grid. You need to find: the average, maximum and minimum
 numbers in the sequence. You also need to print the sum of remainders from dividing
  the sum of threes by the last number of threes (every 3 entered numbers make a threesome).

To understand, let's look at an example of input data: 1 2 3 4 5 6 average: (1 + 2 + 3 + 4 + 5 + 6) / 6 = 3.5 maximum:
 6 minimum: 1 sum of residuals of threes: (1 + 2 + 3) mod 3 + (4 + 5 + 6) mod 6 = 6 mod 3 + 15 mod 6 = 0 + 3 = 3

Output the average by rounding to three decimal places. To do this, use the function round(x, 3).

Your program should output: 3.5 6 1 3

Consider whether it makes sense to store the whole sequence.

The format of the input
A sequence of numbers ending with '#'. All numbers from 1 to 100. The number of numbers in the sequence is
 a multiple of three. One number per line.

Output format
Four numbers separated by a space.

# --------------------------|E|----------------------------------------------------

E-Results of students' work during the semester

Run penalty: 1
Time limit: 1 s
Real time limit: 1 s
Memory limit: 64M
There is a semester's worth of student work. Print the students in order of their grade summation.
 You want to output the sorted work results for each student.

The data is entered as: student_id value

student_id takes on values from 0 to N. value 1 to 10

An example of input data: 0 3 0 5 1 3 1 2

This presents the data for two students, 0 and 1. The sum of the scores of student 0 is 8. Student 1's score is 5.
 So the scores of student 0 should be printed first, then student 1.
  So the sorted results of student 0 should be printed first, then student 1:

5 3 3 2

Recall that list in python has a built-in sort method and has a sorted function.
They have a key parameter that determines which values the object will be sorted by.
 For example, the code below will sort the list by the length of its elements. There is also the parameter reverse.

a = ['###', '@', '??'] a.sort(key=lambda x: len(x)) a ['@', '??', '###']
 a.sort(key=lambda x: len(x), reverse=True) ['###', '??', '@']

You'll learn what a lambda function is later on (there's always the google site as well).
 To do this assignment, all you have to do is understand what the len function should be replaced with.

The format of the input data
The first line N is the number of students.
 Then comes some number of lines (not equal to N) with student results in the format:
  student_id value. 0 <= student_id < N.
   The values are separated by a space. The input ends with #.

Output format
Print the sorted student results on one line.
 Print the scores of the highest scoring student first, then the second highest, and so on. Single line results

# --------------------------|F|----------------------------------------------------

Task F-Chocolate

Penalty for the parcel:	1
Time Limit: 1s
Real time limit: 1s
Memory limit: 64M
Sasha, didn't do his homework, but bought a chocolate bar. And, foolishly, he started to print it out right in class...
 The teacher heard the rustling of the candy. She wanted to call his parents to school, but Sasha persuaded
  her not to call them, but to give them an extra assignment.

The teacher took a close look at the chocolate bar (it was the size of 3x4 bars), divided it into pieces of two bars
 and treated everyone who did their homework. She asked Sasha to write a program which determines how many ways
  there are to divide a 3Ã—N chocolate bar into two pieces.

Sasha needs help to complete the task.

Note: all the pieces in the chocolate bar are numbered, so the ways of dividing the chocolate bars
symmetric to a point or to an axis can be different.

Input format.
At the input there is one number N <= 10000

Output format
Print one number, the number of ways to divide the candy bar.




# --------------------------|G|----------------------------------------------------

G-Stage of a String

Penalty for the parcel:	1
Time Limit: 1s
Real time limit: 1s
Memory limit: 64M
Let a string s be given. Let call its k-th (k > 0) degree s^k string s^k = sss (k times). For example,
 the third degree of string abc is string abcabc.

The root of degree k of string s is such a string t (if it exists) that t^k = s.

Your task is to write a program that finds the degree or root of a string.

Input data format
The input to the program is 2 strings. The first contains the string S and the second contains the power of k.
 A negative power means taking the root of the corresponding power.

Output format
Print the string which contains the answer to the problem. If there is no such string, print 'NO SOLUTION'
 (without quotes).